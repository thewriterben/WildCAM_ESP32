name: Multi-Cloud Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  TERRAFORM_VERSION: '1.5.0'
  KUBECTL_VERSION: '1.28.0'
  HELM_VERSION: '3.12.0'
  ARGOCD_VERSION: '2.8.0'

jobs:
  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Infrastructure validation
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure/terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
      
      - name: Terraform Init
        run: terraform init -backend=false
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v3
      
      - name: TFLint
        run: |
          tflint --init
          tflint --recursive

  # Build Docker images
  build-images:
    name: Build Multi-Arch Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate]
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: wildcam/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to AWS
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://aws.wildcam.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name wildcam-${{ github.event.inputs.environment || 'staging' }}-eks --region us-west-2
      
      - name: Deploy with ArgoCD
        run: |
          kubectl apply -f argocd/applications/wildcam-aws.yaml
          kubectl wait --for=condition=Synced app/wildcam-aws-${{ github.event.inputs.environment || 'staging' }} -n argocd --timeout=600s
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/wildcam-backend -n wildcam-${{ github.event.inputs.environment || 'staging' }}
          kubectl rollout status deployment/wildcam-frontend -n wildcam-${{ github.event.inputs.environment || 'staging' }}

  # Deploy to Azure
  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://azure.wildcam.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group wildcam-${{ github.event.inputs.environment || 'staging' }}-rg \
            --name wildcam-${{ github.event.inputs.environment || 'staging' }}-aks
      
      - name: Deploy with ArgoCD
        run: |
          kubectl apply -f argocd/applications/wildcam-azure.yaml
          kubectl wait --for=condition=Synced app/wildcam-azure-${{ github.event.inputs.environment || 'staging' }} -n argocd --timeout=600s
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/wildcam-backend -n wildcam-${{ github.event.inputs.environment || 'staging' }}
          kubectl rollout status deployment/wildcam-frontend -n wildcam-${{ github.event.inputs.environment || 'staging' }}

  # Deploy to GCP
  deploy-gcp:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: https://gcp.wildcam.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}
      
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials \
            wildcam-${{ github.event.inputs.environment || 'staging' }}-gke \
            --region us-west1 \
            --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Deploy with ArgoCD
        run: |
          kubectl apply -f argocd/applications/wildcam-gcp.yaml
          kubectl wait --for=condition=Synced app/wildcam-gcp-${{ github.event.inputs.environment || 'staging' }} -n argocd --timeout=600s
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/wildcam-backend -n wildcam-${{ github.event.inputs.environment || 'staging' }}
          kubectl rollout status deployment/wildcam-frontend -n wildcam-${{ github.event.inputs.environment || 'staging' }}

  # Integration tests
  integration-tests:
    name: Multi-Cloud Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-aws, deploy-azure, deploy-gcp]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
        working-directory: ./tests
      
      - name: Run integration tests
        run: npm test
        working-directory: ./tests
        env:
          AWS_ENDPOINT: https://aws.wildcam.example.com
          AZURE_ENDPOINT: https://azure.wildcam.example.com
          GCP_ENDPOINT: https://gcp.wildcam.example.com
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: ./tests/results

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Multi-Cloud Deployment ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
