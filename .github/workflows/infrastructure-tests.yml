name: ESP32 Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ESP32WildlifeCAM-main/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-platformio-config:
    runs-on: ubuntu-latest
    name: Validate PlatformIO Configuration
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        pip install platformio
    
    - name: Validate main platformio.ini
      run: |
        echo "Validating main platformio.ini..."
        cd ESP32WildlifeCAM-main
        
        # Check syntax by running check command
        pio check --skip-packages --flags "--std=c++11" || echo "⚠️ Static analysis had warnings"
        
        # Validate environments are defined
        if ! grep -q "\[env:esp32cam\]" platformio.ini; then
          echo "❌ esp32cam environment not defined"
          exit 1
        fi
        echo "✅ esp32cam environment defined"
        
        if ! grep -q "\[env:esp32s3cam\]" platformio.ini; then
          echo "❌ esp32s3cam environment not defined"
          exit 1
        fi
        echo "✅ esp32s3cam environment defined"
        
        echo "✅ PlatformIO configuration validation passed"
    
    - name: Validate example platformio.ini files
      run: |
        echo "Validating example platformio.ini files..."
        
        for example_ini in ESP32WildlifeCAM-main/examples/*/platformio.ini; do
          if [ -f "$example_ini" ]; then
            echo "Checking $example_ini"
            # Basic syntax check
            if ! grep -q "\[env:" "$example_ini"; then
              echo "❌ $example_ini missing environment definitions"
              exit 1
            fi
            echo "✅ $example_ini is valid"
          fi
        done
        
        echo "✅ All example platformio.ini files validated"

  validate-board-definitions:
    runs-on: ubuntu-latest
    name: Validate Board Definitions
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        pip install platformio
    
    - name: List available boards
      run: |
        echo "Listing ESP32 boards available in PlatformIO..."
        pio boards espressif32 | head -50
    
    - name: Validate board targets in platformio.ini
      run: |
        echo "Validating board targets..."
        cd ESP32WildlifeCAM-main
        
        # Extract board definitions from platformio.ini
        boards=$(grep "^board = " platformio.ini | awk '{print $3}' | sort -u)
        
        echo "Boards defined in platformio.ini:"
        echo "$boards"
        
        # Validate each board exists
        for board in $boards; do
          if pio boards espressif32 | grep -q "$board"; then
            echo "✅ Board $board is valid"
          else
            echo "⚠️ Warning: Board $board may need verification"
          fi
        done
        
        echo "✅ Board validation completed"

  validate-library-compatibility:
    runs-on: ubuntu-latest
    name: Validate Library Compatibility
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        pip install platformio
    
    - name: Check library dependencies
      run: |
        echo "Checking library dependencies..."
        cd ESP32WildlifeCAM-main
        
        # List libraries from platformio.ini
        echo "Libraries defined in platformio.ini:"
        grep -A 10 "lib_deps" platformio.ini || true
        
        # Try to install libraries
        pio pkg install || echo "⚠️ Some libraries may need manual review"
        
        # List installed packages
        pio pkg list
        
        echo "✅ Library compatibility check completed"
    
    - name: Validate critical library versions
      run: |
        echo "Validating critical library versions..."
        cd ESP32WildlifeCAM-main
        
        # Check for esp32-camera library
        if grep -q "esp32-camera" platformio.ini; then
          echo "✅ esp32-camera library is defined"
        else
          echo "⚠️ Warning: esp32-camera library not found"
        fi
        
        # Check for ArduinoJson library
        if grep -q "ArduinoJson" platformio.ini; then
          echo "✅ ArduinoJson library is defined"
        else
          echo "⚠️ Warning: ArduinoJson library not found"
        fi
        
        echo "✅ Critical library validation completed"

  test-build-environments:
    runs-on: ubuntu-latest
    name: Test Build Environments
    
    strategy:
      matrix:
        environment: [esp32cam, esp32s3cam]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-pio-test-${{ matrix.environment }}-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-test-
    
    - name: Install PlatformIO
      run: |
        pip install platformio
    
    - name: Test build for ${{ matrix.environment }}
      run: |
        cd ESP32WildlifeCAM-main
        echo "Testing build environment for ${{ matrix.environment }}..."
        
        # Run a compile test (without actual hardware)
        pio run -e ${{ matrix.environment }} -t compiledb || echo "⚠️ CompileDB generation had issues"
        
        # Check build succeeded
        if pio run -e ${{ matrix.environment }}; then
          echo "✅ Build test passed for ${{ matrix.environment }}"
        else
          echo "❌ Build test failed for ${{ matrix.environment }}"
          exit 1
        fi

  validate-project-structure:
    runs-on: ubuntu-latest
    name: Validate Project Structure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required directories
      run: |
        echo "Validating project directory structure..."
        
        # Check for source directory
        if [ ! -d "ESP32WildlifeCAM-main/WildCAM_ESP32/src" ]; then
          echo "❌ Source directory not found"
          exit 1
        fi
        echo "✅ Source directory found"
        
        # Check for include directory
        if [ ! -d "ESP32WildlifeCAM-main/WildCAM_ESP32/include" ]; then
          echo "⚠️ Include directory not found (optional)"
        else
          echo "✅ Include directory found"
        fi
        
        # Check for examples directory
        if [ ! -d "ESP32WildlifeCAM-main/examples" ]; then
          echo "⚠️ Examples directory not found"
        else
          echo "✅ Examples directory found"
        fi
        
        # Check for docs directory
        if [ ! -d "ESP32WildlifeCAM-main/docs" ]; then
          echo "⚠️ Documentation directory not found"
        else
          echo "✅ Documentation directory found"
        fi
        
        # Check for scripts directory
        if [ ! -d "ESP32WildlifeCAM-main/scripts" ]; then
          echo "⚠️ Scripts directory not found"
        else
          echo "✅ Scripts directory found"
        fi
        
        echo "✅ Project structure validation completed"
    
    - name: Check required files
      run: |
        echo "Validating required files..."
        
        # Check for platformio.ini
        if [ ! -f "ESP32WildlifeCAM-main/platformio.ini" ]; then
          echo "❌ platformio.ini not found"
          exit 1
        fi
        echo "✅ platformio.ini found"
        
        # Check for README
        if [ ! -f "ESP32WildlifeCAM-main/README.md" ]; then
          echo "⚠️ README.md not found"
        else
          echo "✅ README.md found"
        fi
        
        # Check for LICENSE
        if [ ! -f "ESP32WildlifeCAM-main/LICENSE" ]; then
          echo "⚠️ LICENSE not found"
        else
          echo "✅ LICENSE found"
        fi
        
        # Check for CONTRIBUTING guide
        if [ ! -f "ESP32WildlifeCAM-main/CONTRIBUTING.md" ]; then
          echo "⚠️ CONTRIBUTING.md not found"
        else
          echo "✅ CONTRIBUTING.md found"
        fi
        
        echo "✅ Required files validation completed"

  validate-partition-tables:
    runs-on: ubuntu-latest
    name: Validate Partition Tables
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check partition table files
      run: |
        echo "Checking for partition table files..."
        
        # Find partition CSV files
        partition_files=$(find ESP32WildlifeCAM-main -name "partitions*.csv" -o -name "partition*.csv")
        
        if [ -z "$partition_files" ]; then
          echo "⚠️ No partition table files found (using default)"
        else
          echo "Found partition table files:"
          echo "$partition_files"
          
          # Validate CSV format
          for csv in $partition_files; do
            echo "Validating $csv..."
            
            # Check if file has valid header
            if head -1 "$csv" | grep -q "Name.*Type.*SubType"; then
              echo "✅ $csv has valid header"
            else
              echo "⚠️ $csv may have non-standard format"
            fi
          done
        fi
        
        echo "✅ Partition table validation completed"

  integration-compile-test:
    runs-on: ubuntu-latest
    name: Integration Compile Test
    needs: [validate-platformio-config, validate-board-definitions, validate-library-compatibility]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-pio-integration-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-integration-
    
    - name: Install PlatformIO
      run: |
        pip install platformio
    
    - name: Full compilation test
      run: |
        cd ESP32WildlifeCAM-main
        echo "Running full compilation test for default environment..."
        
        # Compile for default environment
        if pio run; then
          echo "✅ Full compilation test passed"
        else
          echo "❌ Compilation failed"
          exit 1
        fi
    
    - name: Check firmware size
      run: |
        cd ESP32WildlifeCAM-main
        echo "Checking firmware size..."
        
        # Get firmware size information
        pio run -t size || true
        
        # Check if firmware binaries exist
        if ls .pio/build/*/firmware.bin 1> /dev/null 2>&1; then
          echo "✅ Firmware binaries generated"
          ls -lh .pio/build/*/firmware.bin
        else
          echo "⚠️ Firmware binaries not found"
        fi