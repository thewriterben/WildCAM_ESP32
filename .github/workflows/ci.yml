name: ESP32 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-project:
    runs-on: ubuntu-latest
    name: Validate ESP32 Project Structure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check project structure
      run: |
        echo "Validating ESP32 project structure..."
        
        # Check for main platformio.ini
        if [ ! -f "ESP32WildlifeCAM-main/platformio.ini" ]; then
          echo "❌ Main platformio.ini not found"
          exit 1
        fi
        echo "✅ Main platformio.ini found"
        
        # Check for source directories
        if [ ! -d "ESP32WildlifeCAM-main/WildCAM_ESP32/src" ]; then
          echo "❌ Source directory not found"
          exit 1
        fi
        echo "✅ Source directory found"
        
        # Check for documentation
        if [ ! -d "ESP32WildlifeCAM-main/docs" ]; then
          echo "❌ Documentation directory not found"
          exit 1
        fi
        echo "✅ Documentation directory found"
        
        echo "✅ Project structure validation passed"

  lint-code:
    runs-on: ubuntu-latest
    name: Code Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Run cppcheck on ESP32 source
      run: |
        echo "Running cppcheck on ESP32 source code..."
        find ESP32WildlifeCAM-main/WildCAM_ESP32/src -name "*.cpp" -o -name "*.h" | while read file; do
          echo "Checking $file"
          cppcheck --enable=warning,style,performance --std=c++11 --quiet --error-exitcode=0 "$file"
        done
        echo "✅ Code linting completed"
    
    - name: Check for common issues
      run: |
        echo "Checking for common embedded issues..."
        
        # Check for Serial.print in production code (should use logging)
        if grep -r "Serial\.print" ESP32WildlifeCAM-main/WildCAM_ESP32/src --include="*.cpp" --include="*.h" | grep -v "DEBUG" | grep -v "//"; then
          echo "⚠️ Warning: Found Serial.print statements outside DEBUG blocks"
        fi
        
        # Check for delay() calls that might block
        if grep -r "delay(" ESP32WildlifeCAM-main/WildCAM_ESP32/src --include="*.cpp" | grep -v "//" | grep -v "vTaskDelay"; then
          echo "⚠️ Warning: Found blocking delay() calls"
        fi
        
        echo "✅ Common issues check completed"

  build-esp32:
    runs-on: ubuntu-latest
    needs: [validate-project, lint-code]
    name: Build ESP32 Firmware
    
    strategy:
      matrix:
        environment: [esp32cam, esp32s3cam, ttgo-t-camera]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware for ${{ matrix.environment }}
      run: |
        cd ESP32WildlifeCAM-main
        echo "Building firmware for ${{ matrix.environment }}..."
        pio run -e ${{ matrix.environment }}
        echo "✅ Build completed for ${{ matrix.environment }}"
    
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware-${{ matrix.environment }}
        path: ESP32WildlifeCAM-main/.pio/build/${{ matrix.environment }}/firmware.bin
        retention-days: 30

  build-extended-boards:
    runs-on: ubuntu-latest
    needs: [validate-project, lint-code]
    name: Build Extended Board Support
    
    strategy:
      matrix:
        environment: [esp32c3cam, esp32c6cam, esp32s2cam]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware for ${{ matrix.environment }}
      run: |
        cd ESP32WildlifeCAM-main
        echo "Building firmware for ${{ matrix.environment }}..."
        pio run -e ${{ matrix.environment }} || echo "⚠️ Build failed for ${{ matrix.environment }} (may require specific hardware)"
        echo "Build process completed for ${{ matrix.environment }}"
    
    - name: Upload firmware artifacts (if available)
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: firmware-${{ matrix.environment }}
        path: ESP32WildlifeCAM-main/.pio/build/${{ matrix.environment }}/firmware.bin
        retention-days: 30
        if-no-files-found: ignore

  validate-examples:
    runs-on: ubuntu-latest
    name: Validate Example Projects
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build example projects
      run: |
        echo "Building example projects..."
        
        # Build board_detection example
        if [ -f "ESP32WildlifeCAM-main/examples/board_detection/platformio.ini" ]; then
          echo "Building board_detection example..."
          cd ESP32WildlifeCAM-main/examples/board_detection
          pio run || echo "⚠️ board_detection build had issues"
          cd ../../..
        fi
        
        # Build wildlife_task_manager example
        if [ -f "ESP32WildlifeCAM-main/examples/wildlife_task_manager/platformio.ini" ]; then
          echo "Building wildlife_task_manager example..."
          cd ESP32WildlifeCAM-main/examples/wildlife_task_manager
          pio run || echo "⚠️ wildlife_task_manager build had issues"
          cd ../../..
        fi
        
        echo "✅ Example validation completed"

  run-validation-scripts:
    runs-on: ubuntu-latest
    name: Run Validation Scripts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run project validation
      run: |
        cd ESP32WildlifeCAM-main
        
        # Make scripts executable
        chmod +x scripts/*.sh scripts/*.py 2>/dev/null || true
        
        # Run quick validation if available
        if [ -f "scripts/quick_validate.sh" ]; then
          echo "Running quick validation..."
          bash scripts/quick_validate.sh || echo "⚠️ Validation script had warnings"
        fi
        
        # Run critical components validation if available
        if [ -f "scripts/validate_critical_components.sh" ]; then
          echo "Running critical components validation..."
          bash scripts/validate_critical_components.sh || echo "⚠️ Component validation had warnings"
        fi
        
        echo "✅ Validation scripts completed"

  check-documentation:
    runs-on: ubuntu-latest
    name: Documentation Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate documentation
      run: |
        echo "Checking documentation completeness..."
        
        # Check for README files
        find ESP32WildlifeCAM-main -name "README.md" | while read readme; do
          echo "Found: $readme"
        done
        
        # Check for CONTRIBUTING guide
        if [ -f "ESP32WildlifeCAM-main/CONTRIBUTING.md" ]; then
          echo "✅ CONTRIBUTING.md found"
        else
          echo "⚠️ CONTRIBUTING.md not found"
        fi
        
        # Check for LICENSE
        if [ -f "ESP32WildlifeCAM-main/LICENSE" ]; then
          echo "✅ LICENSE found"
        else
          echo "⚠️ LICENSE not found"
        fi
        
        echo "✅ Documentation check completed"